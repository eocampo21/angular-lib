{"version":3,"file":"tvmaze.mjs","sources":["../../../projects/tvmaze/src/lib/tvmaze.component.ts","../../../projects/tvmaze/src/lib/tvmaze.service.ts","../../../projects/tvmaze/src/lib/poster/poster.component.ts","../../../projects/tvmaze/src/lib/tvmaze.module.ts","../../../projects/tvmaze/src/public-api.ts","../../../projects/tvmaze/src/tvmaze.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'tm-tvmaze',\n  template: `\n    <p>\n      tvmaze works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class TvmazeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Show } from './tvmaze.models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TvmazeService {\n  private readonly apiRoot = 'https://api.tvmaze.com';\n\n  constructor(private http: HttpClient) {}\n\n  getShow(id: number): Observable<Show> {\n    const url = `${this.apiRoot}/shows/${id}`;\n    return this.http.get<Show>(url);\n  }\n}","import { Component, OnInit, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Show } from '../tvmaze.models';\nimport { TvmazeService } from '../tvmaze.service';\n\n@Component({\n  selector: 'tm-poster',\n  template: `\n    <div class=\"container poster\">\n      <ng-container *ngIf=\"left\">\n        <img class=\"poster__img left\" *ngIf=\"posterUrl$ | async as poster\" [src]=\"poster.image.medium\" />\n      </ng-container>\n     \n      <ul class=\"poster__description\">\n        <li class=\"poster__name\" *ngIf=\"posterUrl$ | async as poster\"><p>Movies Name: {{poster.name}}</p></li>\n        <li class=\"poster__rating\" *ngIf=\"posterUrl$ | async as poster\" ><p>Rating: {{poster.rating.average}}</p></li>\n        <li class=\"poster__summary\" *ngIf=\"posterUrl$ | async as poster\" [innerHTML]=\"poster.summary\" ></li>\n      </ul>\n      <ng-container *ngIf=\"!left\">\n        <img class=\"poster__img right\" *ngIf=\"posterUrl$ | async as poster\" [src]=\"poster.image.medium\" />\n      </ng-container>\n    </div>\n  `,\n  styles: [`\n    .poster {\n      display: flex;\n      margin: 2vw;\n      overflow: hidden;\n    }\n\n    .poster__img.left {\n      border-bottom-left-radius: 30px;\n      border-top-left-radius: 30px;\n    }\n\n    .poster__img.right {\n      border-bottom-right-radius: 30px;\n      border-top-right-radius: 30px;\n     }\n\n    .poster__description {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      padding-inline-end: 40px;\n      padding-inline-end: 40px;\n\n      border: 1px solid #3f51b51c;\n      margin-block-start: 0;\n      margin-block-end: 0;\n    }\n\n    ul li {\n      list-style-type: none;\n    }\n  `]\n})\nexport  class PosterComponent implements OnInit {\n  @Input() showId: number | null = null;\n  @Input() left?: boolean = false;\n  posterUrl$: Observable<Show> | undefined;\n\n  constructor(private tvmaze: TvmazeService) {\n  }\n\n  ngOnInit() {\n    console.log(this.showId);\n    this.posterUrl$ = this.tvmaze\n      .getShow(this.showId || 55)\n      .pipe(map(show => show));\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport  {PosterComponent}  from './poster/poster.component';\nimport { TvmazeComponent } from './tvmaze.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [PosterComponent, TvmazeComponent],\n  exports: [PosterComponent, TvmazeComponent]\n})\nexport class TvmazeModule {}","/*\n * Public API Surface of tvmaze\n */\n\nexport * from './lib/tvmaze.component';\nexport * from './lib/poster/poster.component';\nexport * from './lib/tvmaze.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.TvmazeService"],"mappings":"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"}